import asyncio
import random
from dotenv import load_dotenv
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties 
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from collections import defaultdict
from aiogram.types import Message, CallbackQuery

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

# –ì—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
property_groups = {
    "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–µ": [
        {"name": "–ü–ª–æ—â–∞–¥—å –î–µ–∫–∞–±—Ä–∏—Å—Ç–æ–≤", "price": 50, "house_price": 50, "rent": [2, 10, 30, 90, 160, 250]},
        {"name": "–ü–∞–º—è—Ç–Ω–∏–∫ –í.–ò.–õ–µ–Ω–∏–Ω—É", "price": 60, "house_price": 50, "rent": [4, 20, 60, 100, 180, 300]}
    ],
    "–ñ—ë–ª—Ç—ã–µ": [
        {"name": "–ù–∏–∂–Ω—è—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è", "price": 80, "house_price": 50, "rent": [4, 20, 60, 100, 180, 300]},
        {"name": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "price": 90, "house_price": 50, "rent": [8, 40, 100, 290, 450, 600]},
        {"name": "–°–∫–≤–µ—Ä –ö–∏—Ä–æ–≤–∞", "price": 100, "house_price": 50, "rent": [10, 50, 150, 300, 500, 700]}
    ],
    "–û—Ä–∞–Ω–∂–µ–≤—ã–µ": [
        {"name": "–ü–∞–º—è—Ç–Ω–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É III", "price": 120, "house_price": 100, "rent": [12, 60, 180, 500, 700, 900]},
        {"name": "–ú–µ–º–æ—Ä–∏–∞–ª –í–µ—á–Ω—ã–π –æ–≥–æ–Ω—å", "price": 130, "house_price": 100, "rent": [14, 70, 200, 550, 750, 950]},
        {"name": "–ü–∞–º—è—Ç–Ω–∏–∫ –õ–µ–æ–Ω–∏–¥—É –ì–∞–π–¥–∞—é", "price": 140, "house_price": 100, "rent": [16, 80, 220, 600, 800, 1000]}
    ],
    "–ì–æ–ª—É–±—ã–µ": [
        {"name": "–ü–∞–º—è—Ç–Ω–∏–∫ –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–∞–º", "price": 160, "house_price": 100, "rent": [18, 90, 250, 700, 900, 1100]},
        {"name": "–ö–∞–∑–∞–Ω—Å–∫–∞—è —Ü–µ—Ä–∫–æ–≤—å", "price": 170, "house_price": 100, "rent": [20, 100, 300, 750, 850, 1200]},
        {"name": "–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≥.–ò—Ä–∫—É—Ç—Å–∫–∞", "price": 180, "house_price": 100, "rent": [22, 110, 330, 800, 1000, 1300]}
    ],
    "–ó–µ–ª—ë–Ω—ã–µ": [
        {"name": "–ò—Ä–∫—É—Ç—Å–∫–∏–π —Ü–∏—Ä–∫", "price": 200, "house_price": 150, "rent": [24, 120, 360, 850, 1100, 1400]},
        {"name": "–£—Å–∞–¥—å–±–∞ –í.–ü.–°—É–∫–∞—á–µ–≤–∞", "price": 210, "house_price": 150, "rent": [26, 130, 390, 900, 1150, 1500]},
        {"name": "–ì–∞–ª–µ—Ä–µ—è –í.–ë—Ä–æ–Ω—à—Ç–µ–π–Ω–∞", "price": 220, "house_price": 150, "rent": [28, 140, 400, 950, 1200, 1600]}
    ],
    "–ë–∏—Ä—é–∑–æ–≤—ã–µ": [
        {"name": "–ú—É–∑–µ–π –Ω–∞ —Å–≤–∞–ª–∫–µ", "price": 240, "house_price": 150, "rent": [30, 150, 450, 1000, 1300, 1700]},
        {"name": "–£–ª–∏—Ü–∞ –£—Ä–∏—Ü–∫–æ–≥–æ", "price": 250, "house_price": 150, "rent": [32, 160, 470, 1050, 1350, 1800]},
        {"name": "–£—Å–∞–¥—å–±–∞ –í–æ–ª–∫–æ–Ω—Å–∫–∏—Ö", "price": 260, "house_price": 150, "rent": [34, 170, 500, 1100, 1400, 1900]}
    ],
    "–†–æ–∑–æ–≤—ã–µ": [
        {"name": "–û—Å—Ç—Ä–æ–≤ –Æ–Ω–æ—Å—Ç—å", "price": 280, "house_price": 200, "rent": [36, 180, 520, 1150, 1450, 2000]},
        {"name": "–ú—É–∑–µ–π-–ª–µ–¥–æ–∫–æ–ª –ê–Ω–≥–∞—Ä–∞", "price": 290, "house_price": 200, "rent": [38, 190, 550, 1200, 1500, 2100]},
        {"name": "–°–ø–æ—Ä—Ç-–ø–∞—Ä–∫ –ü–æ–ª—è–Ω–∞", "price": 300, "house_price": 200, "rent": [40, 200, 600, 1250, 1550, 2200]}
    ],
    "–§–∏–æ–ª–µ—Ç–æ–≤—ã–µ": [
        {"name": "–ò—Ä–∫—É—Ç—Å–∫–∞—è —Å–ª–æ–±–æ–¥–∞", "price": 320, "house_price": 200, "rent": [42, 220, 650, 1300, 1600, 2300]},
        {"name": "–¢–µ–∞—Ç—Ä –∏–º.–ó–∞–≥—É—Ä—Å–∫–æ–≥–æ", "price": 350, "house_price": 200, "rent": [50, 250, 700, 1400, 1800, 2500]}
    ],
    "–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏": [
        {"name": "–°—Ç–∞–Ω—Ü–∏—è –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è", "price": 200},
        {"name": "–°—Ç–∞–Ω—Ü–∏—è –ö–∞—è", "price": 200},
        {"name": "–°—Ç–∞–Ω—Ü–∏—è –ò—Ä–∫—É—Ç—Å–∫-–ü–∞—Å—Å.", "price": 200},
        {"name": "–°—Ç–∞–Ω—Ü–∏—è –ú–µ–ª—å–Ω–∏–∫–æ–≤–æ", "price": 200}
    ],
    "–ó–∞–≤–æ–¥—ã": [
        {"name": "–ö–∞–±–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥", "price": 150},
        {"name": "–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–π –∑–∞–≤–æ–¥", "price": 150},
    ]
}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏ –∏–≥—Ä–æ–∫–æ–≤
games = {}
game_started = {}
player_sessions = {}
player_balance = {}
player_properties = {}
property_owners = {}
player_names = {}
player_buildings = {}
sent_start_button = {}

START_MONEY = 1500

# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –∏–≥—Ä—É
class JoinGameStates(StatesGroup):
    waiting_for_game_code = State()
# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
class BuildHouseStates(StatesGroup):
    waiting_for_house_count = State()
# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
class BalanceChangeStates(StatesGroup):
    waiting_for_action = State()
    waiting_for_amount = State()
# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é
class TradeStates(StatesGroup):
    choosing_player = State()
    choosing_group = State()
    choosing_property = State()
# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–µ–Ω—Ç—ã –∑–∞–≤–æ–¥–æ–≤
class RentStates(StatesGroup):
    wait_for_dice_sum = State()

# –ù–ê–ß–ê–¢–¨ –ò–ì–†–£--------------------------------------------------------------------------------------------------

@dp.message(Command("start"))
async def welcome(message: types.Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã ¬´–ú–æ–Ω–æ–ø–æ–ª–∏—è –ò—Ä–∫—É—Ç—Å–∫–∞¬ª.",
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")]
    ])
    await message.answer("\n".join(text), reply_markup=keyboard)

#–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –æ—Ç —Ö–æ—Å—Ç–∞
@dp.callback_query(lambda c: c.data == "create_game")
async def handle_create_game(callback: types.CallbackQuery):
    code = str(random.randint(1000, 9999))
    games[code] = [callback.from_user.id]
    player_sessions[callback.from_user.id] = code
    player_names[callback.from_user.id] = callback.from_user.full_name
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/–∑–∞–≤–µ—Ä—à–∏—Ç—å_–∏–≥—Ä—É")]
        ],
        resize_keyboard=True)
    await callback.message.answer(
        f"–í—ã —Å—Ç–∞–ª–∏ —Ö–æ—Å—Ç–æ–º –∏–≥—Ä—ã! –ö–æ–¥: <b>{code}</b>\n–ñ–¥—ë–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –ë–ê–õ–ê–ù–° –ú–ï–ù–Æ--------------------------------------------------------------------------------------------------------------------------------------------------

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("–±–∞–ª–∞–Ω—Å"))
async def balance_menu(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", callback_data="show_balance")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="change_balance")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
@dp.callback_query(lambda c: c.data == "show_balance")
async def show_balance(callback: CallbackQuery):
    user_id = callback.from_user.id
    balance = player_balance.get(user_id, START_MONEY)
    await callback.message.edit_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ")

# –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å–Ω—è—Ç–∏–µ)
@dp.callback_query(lambda c: c.data == "change_balance")
async def change_balance_command(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance_add")],
        [InlineKeyboardButton(text="‚ûñ –°–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="balance_subtract")]
    ])
    await callback.message.edit_text("üí∞ –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–æ–º?", reply_markup=keyboard)
    await state.set_state(BalanceChangeStates.waiting_for_action)

# –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å–Ω—è—Ç–∏–µ)
@dp.callback_query(lambda c: c.data in ["balance_add", "balance_subtract"])
async def choose_balance_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data  # balance_add –∏–ª–∏ balance_subtract
    await state.update_data(action=action)
    await callback.message.edit_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(BalanceChangeStates.waiting_for_amount)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message(BalanceChangeStates.waiting_for_amount)
async def process_balance_amount(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    action = data.get("action")

    current_balance = player_balance.get(user_id, START_MONEY)

    if action == "balance_add":
        player_balance[user_id] = current_balance + amount
        await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_balance[user_id]}‚ÇΩ")
    elif action == "balance_subtract":
        if amount > current_balance:
            await message.answer(f"‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å —Ç–æ–ª—å–∫–æ {current_balance}‚ÇΩ.")
            await state.clear()
            return
        player_balance[user_id] = current_balance - amount
        await message.answer(f"‚úÖ –° –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ {amount}‚ÇΩ.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_balance[user_id]}‚ÇΩ")

    await state.clear()

# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ò–ì–†–ï-----------------------------------------------------------------------------------------------------

@dp.callback_query(lambda c: c.data == "join_game")
async def handle_join_game(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(JoinGameStates.waiting_for_game_code)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã (4 —Ü–∏—Ñ—Ä—ã):")

@dp.message(JoinGameStates.waiting_for_game_code)
async def join_game(message: types.Message, state: FSMContext):
    code = message.text
    user_id = message.from_user.id

    if code.isdigit() and len(code) == 4:
        if code in games:
            if user_id not in games[code]:
                games[code].append(user_id)
                player_sessions[user_id] = code
                player_names[user_id] = message.from_user.full_name
                await message.answer(f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ {code}!")
                await state.clear()

            players = games.get(code, [])

            if len(players) < 2:
                await message.answer("‚ùó –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
                return

            # –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É (–Ω–µ —Ö–æ—Å—Ç—É)
            if user_id != games[code][0]:
                await message.answer("–û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –æ—Ç —Ö–æ—Å—Ç–∞...")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ö–æ—Å—Ç—É
            host_id = games[code][0]
            if len(players) >= 2 and not sent_start_button.get(code):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_game:{code}")]
                ])
                await bot.send_message(host_id, "‚úÖ –ò–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É:", reply_markup=keyboard)
                sent_start_button[code] = True
                await state.clear()
        else:
            await message.answer("‚ùå –ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∏–≥—Ä—ã (4 —Ü–∏—Ñ—Ä—ã).")

@dp.callback_query(lambda c: c.data.startswith("start_game:"))
async def handle_start_game(callback: types.CallbackQuery):
    code = callback.data.split(":")[1]
    if code not in games:
        await callback.message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id = callback.from_user.id
    if games[code][0] != user_id:
        await callback.message.answer("‚ùó –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    await start_game(code)

# –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
async def start_game(code):
    players = games[code]
    game_started[code] = True
    host_id = players[0]
    for user_id in players:
        player_balance[user_id] = START_MONEY
        player_properties[user_id] = []
        builder = ReplyKeyboardBuilder()
        builder.button(text="/–±–∞–ª–∞–Ω—Å")
        builder.button(text="/–∫—É–ø–∏—Ç—å")
        builder.button(text="/—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å")
        builder.button(text="/—Å—Ç—Ä–æ–∏—Ç—å")
        builder.button(text="/—Ä–µ–Ω—Ç–∞")

        if user_id == host_id:
            builder.button(text="/–∑–∞–≤–µ—Ä—à–∏—Ç—å_–∏–≥—Ä—É")

        builder.adjust(2)
        await bot.send_message(
            user_id,
            f"üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à –±–∞–ª–∞–Ω—Å: {START_MONEY}‚ÇΩ",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

# –ó–ê–í–ï–†–®–ò–¢–¨ –ò–ì–†–£---------------------------------------------------------------------------------------------------------------------------------------------

@dp.message(Command("–∑–∞–≤–µ—Ä—à–∏—Ç—å_–∏–≥—Ä—É"))
async def end_game(message: types.Message):
    user_id = message.from_user.id
    code = player_sessions.get(user_id)

    if not code or code not in games:
        await message.answer("‚ùó –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ.")
        return

    if games[code][0] != user_id:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.")
        return

    # –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤—Å–µ–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    player_ids = games[code]

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for pid in player_ids:
        player_sessions.pop(pid, None)
        player_balance.pop(pid, None)
        player_properties.pop(pid, None)
        player_names.pop(pid, None)
        player_buildings.pop(pid, None)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∏–≥—Ä–µ
    for prop in list(property_owners.keys()):
        if property_owners[prop] in player_ids:
            del property_owners[prop]

    for group, streets in property_groups.items():
        for street in streets:
            street["houses"] = 0
            street["hotel"] = False

    # –°–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏—è—Ö —É –∏–≥—Ä–æ–∫–æ–≤
    player_buildings.clear()

    del games[code]
    del sent_start_button[code]

    for pid in player_ids:
        await bot.send_message(
            pid,
            "üõë –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=types.ReplyKeyboardRemove()
        )

        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã ¬´–ú–æ–Ω–æ–ø–æ–ª–∏—è –ò—Ä–∫—É—Ç—Å–∫–∞¬ª.",
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="create_game")],
            [InlineKeyboardButton(text="üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="join_game")]
        ])
        await bot.send_message(pid, "\n".join(text), reply_markup=keyboard)

# –ú–ï–ù–Æ –°–û–ë–°–¢–í–ï–ù–ù–û–°–¢–¨--------------------------------------------------------------------------------------------------------------------------------------

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é
@dp.message(Command("—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"))
async def property_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –¢–µ–∫—É—â–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", callback_data="show_properties")],
        [InlineKeyboardButton(text="üîÑ –û–±–º–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é", callback_data="trade_properties")],
        [InlineKeyboardButton(text="üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö", callback_data="view_all_properties")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–∞—à–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é:", reply_markup=keyboard)

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
@dp.callback_query(lambda c: c.data == "show_properties")
async def show_properties(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    props = player_properties.get(user_id, [])
    
    if props:
        lines = []
        for p in props:
            buildings = player_buildings.get(user_id, {}).get(p, {"houses": 0, "hotel": False})
            houses = buildings["houses"]
            hotel = buildings["hotel"]
                
            street_color = None
            for group_name, streets in property_groups.items():
                for street in streets:
                    if street["name"].strip().lower() == p.strip().lower():
                        street_color = group_name
                        break
                    if street_color:
                        break
            
            if street_color in ["–ó–∞–≤–æ–¥—ã", "–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏"]:
                lines.append(f"‚óÜ {p} ({street_color})")
            else:
                lines.append(f"‚óÜ {p} ({street_color}) \n üè† –î–æ–º–∞: {houses} | üè® –û—Ç–µ–ª—å: {'–¥–∞' if hotel else '–Ω–µ—Ç'}")

        await callback.message.edit_text("–í–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:\n" + "\n".join(lines))
    else:
        await callback.message.edit_text("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.")

# –û–±–º–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é
@dp.callback_query(lambda c: c.data == "trade_properties")
async def start_trade(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in player_sessions:
        await callback.message.edit_text("‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∏–≥—Ä–µ.")
        return

    code = player_sessions[user_id]
    players_in_game = games.get(code, [])
    other_players = [pid for pid in players_in_game if pid != user_id]

    if not other_players:
        await callback.message.edit_text("‚ùó –í –∏–≥—Ä–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text=player_names[pid], callback_data=f"trade_player_{pid}")] 
        for pid in other_players
    ])
    await callback.message.edit_text("üîÑ –ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?", reply_markup=keyboard)
    await state.set_state(TradeStates.choosing_player)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
@dp.callback_query(lambda c: c.data.startswith("trade_player_"))
async def choose_trade_partner(callback: types.CallbackQuery, state: FSMContext):
    receiver_id = int(callback.data.split("_")[-1])
    sender_id = callback.from_user.id

    await state.update_data(receiver_id=receiver_id)

    sender_props = player_properties.get(sender_id, [])
    if not sender_props:
        await callback.message.edit_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.")
        await state.clear()
        return

    owned_groups = []
    for group, props in property_groups.items():
        if any(p["name"] in sender_props for p in props):
            owned_groups.append(group)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=group, callback_data=f"trade_group_{group}")]
        for group in owned_groups
    ])

    await callback.message.edit_text("üé® –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
    await state.set_state(TradeStates.choosing_group)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã 
@dp.callback_query(lambda c: c.data.startswith("trade_group_"))
async def choose_property_group(callback: types.CallbackQuery, state: FSMContext):
    sender_id = callback.from_user.id
    group_name = callback.data.split("trade_group_")[1]

    sender_props = player_properties.get(sender_id, [])
    streets_in_group = property_groups.get(group_name, [])

    for street in streets_in_group:
        street_name = street["name"]
        if street_name in sender_props:
            buildings = player_buildings.get(sender_id, {}).get(street_name, {"houses": 0, "hotel": False})
            if buildings["houses"] > 0 or buildings["hotel"]:
                await callback.message.edit_text(
                    f"‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å —É–ª–∏—Ü—ã –∏–∑ –≥—Ä—É–ø–ø—ã ¬´{group_name}¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –Ω–∏—Ö –µ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏."
                )
                await state.clear()
                return

    owned_in_group = [p for p in streets_in_group if p["name"] in sender_props]

    if not owned_in_group:
        await callback.message.edit_text("‚ùó –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        await state.clear()
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=p["name"], callback_data=f"trade_property_{p['name']}")]
        for p in owned_in_group
    ])

    await callback.message.edit_text("üèò –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:", reply_markup=keyboard)
    await state.set_state(TradeStates.choosing_property)

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞
@dp.callback_query(lambda c: c.data.startswith("trade_property_"))
async def finalize_trade(callback: types.CallbackQuery, state: FSMContext):
    sender_id = callback.from_user.id
    data = await state.get_data()
    receiver_id = data.get("receiver_id")
    property_name = callback.data.split("trade_property_")[1]

    player_properties[sender_id].remove(property_name)

    if receiver_id not in player_properties:
        player_properties[receiver_id] = []
    player_properties[receiver_id].append(property_name)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    property_owners[property_name] = receiver_id

    await callback.message.edit_text(
        f"‚úÖ –í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ {property_name} –∏–≥—Ä–æ–∫—É {player_names[receiver_id]}."
    )

    await bot.send_message(
        receiver_id,
        f"üì¶ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ¬´{property_name}¬ª –æ—Ç {player_names[sender_id]}!"
    )

    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
@dp.callback_query(lambda c: c.data == "view_all_properties")
async def view_all_properties(callback: types.CallbackQuery):
    all_players = list(player_properties.keys())
    
    if not all_players:
        await callback.message.edit_text("‚ùó –í –∏–≥—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤.")
        return

    lines = []
    for player_id in all_players:
        props = player_properties.get(player_id, [])
        if props:
            player_info = [f"üè∑ –ò–≥—Ä–æ–∫: {player_names.get(player_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}"]
            for p in props:
                buildings = player_buildings.get(player_id, {}).get(p, {"houses": 0, "hotel": False})
                houses = buildings["houses"]
                hotel = buildings["hotel"]
                
                street_color = None
                for group_name, streets in property_groups.items():
                    for street in streets:
                        if street["name"].strip().lower() == p.strip().lower():
                            street_color = group_name
                            break
                    if street_color:
                        break
                
                if street_color in ["–ó–∞–≤–æ–¥—ã", "–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏"]:
                    player_info.append(f"‚óÜ {p} ({street_color})")
                else:
                    player_info.append(f"‚óÜ {p} ({street_color}) \n üè† –î–æ–º–∞: {houses} | üè® –û—Ç–µ–ª—å: {'–¥–∞' if hotel else '–Ω–µ—Ç'}")

            lines.append("\n".join(player_info))
        else:
            lines.append(f"üè∑ –ò–≥—Ä–æ–∫: {player_names.get(player_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')} \n ‚ùó –ù–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏")

    if lines:
        await callback.message.edit_text("üëÄ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:\n\n" + "\n\n".join(lines))
    else:
        await callback.message.edit_text("‚ùó –£ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.")

# –ö–£–ü–ò–¢–¨---------------------------------------------------------------------------------------------------------------------------------

@dp.message(Command("–∫—É–ø–∏—Ç—å"))
async def choose_group(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=group, callback_data=f"group:{group}")]
            for group in property_groups
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ —Ç–∏–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã —É–ª–∏—Ü
@dp.callback_query(lambda c: c.data.startswith("group:"))
async def show_properties_from_group(callback: types.CallbackQuery):
    group = callback.data.split(":", 1)[1]
    streets = property_groups.get(group, [])

    buttons = []
    for s in streets:
        name = s['name']
        price = s['price']

        if name in property_owners:
            owner_id = property_owners[name]
            owner_name = player_names.get(owner_id, "–¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫")

            if owner_id == callback.from_user.id:
                label = f"üìç {name} ‚Äî –≤–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
                buttons.append([InlineKeyboardButton(text=label, callback_data=f"owned:{name}")])
            else:
                label = f"üìç {name} ‚Äî –∑–∞–Ω—è—Ç–∞ ({owner_name})"
                buttons.append([InlineKeyboardButton(text=label, callback_data=f"occupied:{name}")])
        else:
            label = f"{name} ‚Äî {price}‚ÇΩ"
            buttons.append([InlineKeyboardButton(text=label, callback_data=f"buy:{name}")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        f"üèò –£–ª–∏—Ü—ã –≤ –≥—Ä—É–ø–ø–µ ¬´{group}¬ª. –í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=keyboard
    )

# –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–ª–∏—Ü—ã –∏ –ø–æ–∫—É–ø–∫–∞
@dp.callback_query(lambda c: c.data.startswith("buy:"))
async def handle_buy_property(callback: types.CallbackQuery):
    property_name = callback.data.split(":", 1)[1]
    user_id = callback.from_user.id

    if user_id not in player_sessions:
        await callback.answer("‚ùó –í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ", show_alert=True)
        return

    price = None
    for group in property_groups.values():
        for prop in group:
            if prop["name"] == property_name:
                price = prop["price"]
                break
        if price is not None:
            break

    if price is None:
        await callback.answer("‚ùå –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    balance = player_balance.get(user_id)
    if balance is None:
        player_balance[user_id] = START_MONEY
        balance = START_MONEY

    if balance < price:
        await callback.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", show_alert=True)
        return

    player_balance[user_id] -= price
    player_properties.setdefault(user_id, []).append(property_name)
    property_owners[property_name] = user_id

    await callback.message.edit_text(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ ¬´{property_name}¬ª –∑–∞ {price}‚ÇΩ")
    await callback.answer("–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
@dp.callback_query(lambda c: c.data.startswith("owned:"))
async def handle_owned_property(callback: types.CallbackQuery):
    property_name = callback.data.split(":", 1)[1]
    await callback.answer(f"üè† {property_name} —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º", show_alert=True)

# –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∑–∞–Ω—è—Ç—É—é –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
@dp.callback_query(lambda c: c.data.startswith("occupied:"))
async def handle_occupied_property(callback: types.CallbackQuery):
    property_name = callback.data.split(":", 1)[1]
    owner_id = property_owners.get(property_name)
    owner_name = player_names.get(owner_id, "–¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫")
    await callback.answer(f"‚ùå {property_name} —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç {owner_name}", show_alert=True)

# –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û----------------------------------------------------------------------------------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–æ–≤
async def show_build_menu(user_id: int, send_func):
    properties = player_properties.get(user_id, [])

    owned_groups = {}
    for group_name, streets in property_groups.items():
        group_owned_streets = []
        for street in streets:
            if street["name"] in properties:
                group_owned_streets.append(street["name"])
        if group_owned_streets:
            owned_groups[group_name] = group_owned_streets

    buttons = []
    for group_name, owned_streets in owned_groups.items():
        # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≤–æ–¥–æ–≤ –∏ –∂–¥
        if group_name in ["–ó–∞–≤–æ–¥—ã", "–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏"]:
            continue

        full_group_streets = [street["name"] for street in property_groups[group_name]]
        if set(full_group_streets).issubset(set(properties)):
            buttons.append([InlineKeyboardButton(text=group_name, callback_data=f"choose_group:{group_name}")])

    if not buttons:
        await send_func("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–π –≥—Ä—É–ø–ø—ã —É–ª–∏—Ü –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await send_func("üèó –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:", reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–æ–≤
@dp.message(Command("—Å—Ç—Ä–æ–∏—Ç—å"))
async def start_building(message: types.Message, state: FSMContext):
    await show_build_menu(message.from_user.id, message.answer)

def find_street_info_and_group(street_name):
    for group, street_list in property_groups.items():
        for street in street_list:
            if street["name"].strip() == street_name.strip():
                return street, group
    return None, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —É–ª–∏—Ü
@dp.callback_query(lambda c: c.data.startswith("choose_group:"))
async def choose_street_in_group(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data.split(":")[1]
    streets = [street["name"] for street in property_groups[group]]
    buttons = [[InlineKeyboardButton(text=street, callback_data=f"choose_build:{street}")] for street in streets]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(f"üèò –í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–ª–∏—Ü—ã
@dp.callback_query(lambda c: c.data.startswith("choose_build:"))
async def ask_build_option(callback: types.CallbackQuery, state: FSMContext):
    street = callback.data.split(":")[1].strip()

    await state.set_state(BuildHouseStates.waiting_for_house_count)
    await state.update_data(street=street)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º", callback_data="build_house")],
        [InlineKeyboardButton(text="üè® –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–µ–ª—å", callback_data="build_hotel")]
    ])

    await callback.message.edit_text(f"üèó –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ ¬´{street}¬ª?", reply_markup=keyboard)

# –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–∞
@dp.callback_query(lambda c: c.data == "build_house")
async def build_house_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    street_name = data.get("street")
    user_id = callback.from_user.id

    if not street_name:
        await callback.message.answer("‚ùó –£–ª–∏—Ü–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        await state.clear()
        return

    street_info, group = find_street_info_and_group(street_name)
    if not street_info:
        await callback.message.answer("‚ùó –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    buildings = player_buildings.setdefault(user_id, {}).setdefault(street_name, {"houses": 0, "hotel": False})

    if buildings["hotel"]:
        await callback.message.answer("üè® –û—Ç–µ–ª—å —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ.")
        return

    if buildings["houses"] >= 4:
        await callback.message.answer("‚ùó –ù–∞ —É–ª–∏—Ü–µ —É–∂–µ 4 –¥–æ–º–∞. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –æ—Ç–µ–ª—å.")
        return

    await state.set_state(BuildHouseStates.waiting_for_house_count)
    await callback.message.answer(f"üè† –°–∫–æ–ª—å–∫–æ –¥–æ–º–æ–≤ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ ¬´{street_name}¬ª? (1‚Äì{4 - buildings['houses']})")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–º–æ–≤
@dp.message(BuildHouseStates.waiting_for_house_count)
async def handle_house_count(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        count = int(message.text)
        if count < 1 or count > 4:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.")
        return

    data = await state.get_data()
    street_name = data.get("street", "").strip()
    if not street_name:
        await message.answer("‚ùó –£–ª–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞.")
        await state.clear()
        return

    street_info, group_name = find_street_info_and_group(street_name)
    if street_info is None:
        await message.answer(f"‚ùó –£–ª–∏—Ü–∞ ¬´{street_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.")
        await state.clear()
        return

    buildings = player_buildings.setdefault(user_id, {}).setdefault(street_name, {"houses": 0, "hotel": False})

    if buildings["hotel"]:
        await message.answer("üè® –û—Ç–µ–ª—å —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ.")
        return

    total_houses = buildings["houses"] + count
    if total_houses > 4:
        await message.answer("‚ùó –ú–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º 4 –¥–æ–º–∞ –Ω–∞ –æ–¥–Ω–æ–π —É–ª–∏—Ü–µ.")
        return

    total_cost = count * street_info["house_price"]
    balance = player_balance.get(user_id, START_MONEY)
    if balance < total_cost:
        await message.answer(f"üí∏ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {total_cost}‚ÇΩ, —É –≤–∞—Å {balance}‚ÇΩ.")
        await state.clear()
        return

    player_balance[user_id] = balance - total_cost
    buildings["houses"] += count
    
    await message.answer(
        f"‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–æ {count} –¥–æ–º(–æ–≤) –Ω–∞ ¬´{street_name}¬ª –∑–∞ {total_cost}‚ÇΩ.\n"
        f"üè† –í—Å–µ–≥–æ –¥–æ–º–æ–≤: {buildings['houses']}, –æ—Ç–µ–ª—å: {'‚úÖ' if buildings['hotel'] else '‚ùå'}\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {player_balance[user_id]}‚ÇΩ"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data="continue_building")],
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel_building")]
    ])
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–∞ –¥—Ä—É–≥–æ–π —É–ª–∏—Ü–µ?", reply_markup=keyboard)
    await state.clear()

# –ü–æ—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == "build_hotel")
async def build_hotel_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()

    street_name = data.get("street", "").strip()
    if not street_name:
        await callback.message.answer("‚ùó –£–ª–∏—Ü–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        await state.clear()
        return

    street_info, group = find_street_info_and_group(street_name)
    if not street_info:
        await callback.message.answer(f"‚ùó –£–ª–∏—Ü–∞ ¬´{street_name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    buildings = player_buildings.setdefault(user_id, {}).setdefault(street_name, {"houses": 0, "hotel": False})

    if buildings["hotel"]:
        await callback.message.answer("üè® –û—Ç–µ–ª—å —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ.")
        return

    if buildings["houses"] < 4:
        await callback.message.answer("‚ùó –î–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–µ–ª—è –Ω—É–∂–Ω–æ 4 –¥–æ–º–∞.")
        return

    cost = street_info["house_price"]
    balance = player_balance.get(user_id, START_MONEY)
    if balance < cost:
        await callback.message.answer(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {cost}‚ÇΩ, —É –≤–∞—Å {balance}‚ÇΩ.")
        await state.clear()
        return

    player_balance[user_id] = balance - cost
    buildings["houses"] = 0
    buildings["hotel"] = True

    await callback.message.answer(
        f"üè® –û—Ç–µ–ª—å –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ ¬´{street_name}¬ª –∑–∞ {cost}‚ÇΩ.\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {player_balance[user_id]}‚ÇΩ"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", callback_data="continue_building")],
        [InlineKeyboardButton(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel_building")]
    ])
    await callback.message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–∞ –¥—Ä—É–≥–æ–π —É–ª–∏—Ü–µ?", reply_markup=keyboard)

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
@dp.callback_query(lambda c: c.data == "cancel_building")
async def handle_cancel_building(callback: types.CallbackQuery):
    await callback.message.edit_text("üîö –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
@dp.callback_query(lambda c: c.data == "continue_building")
async def continue_building(callback: types.CallbackQuery, state: FSMContext):
    await show_build_menu(callback.from_user.id, callback.message.answer)
    await callback.answer()

# –†–ï–ù–¢–ê-----------------------------------------------------------------------------------------------------------------------------------------

# –ö–Ω–æ–ø–∫–∞ —Ä–µ–Ω—Ç—ã
@dp.message(Command("—Ä–µ–Ω—Ç–∞"))
async def start_rent(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    other_players = [uid for uid in player_properties if uid != user_id]

    if not other_players:
        await message.answer("‚ùó –°–µ–π—á–∞—Å –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.")
        return

    buttons = [
        [InlineKeyboardButton(text=f"{player_names[uid]}", callback_data=f"rent_to:{uid}")]
        for uid in other_players
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üë§ –ö–æ–º—É –≤—ã –ø–ª–∞—Ç–∏—Ç–µ —Ä–µ–Ω—Ç—É?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
@dp.callback_query(lambda c: c.data.startswith("rent_to:"))
async def choose_rent_group(callback: types.CallbackQuery, state: FSMContext):
    to_id = int(callback.data.split(":")[1])
    await state.update_data(rent_to=to_id)

    owned = player_properties.get(to_id, [])
    groups_with_streets = set()
    for group_name, streets in property_groups.items():
        if any(street["name"] in owned for street in streets):
            groups_with_streets.add(group_name)

    if not groups_with_streets:
        await callback.message.answer("‚ùó –£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.")
        return

    buttons = [
        [InlineKeyboardButton(text=group, callback_data=f"rent_group:{group}")]
        for group in groups_with_streets
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("üåà –ù–∞ –∫–∞–∫—É—é –≥—Ä—É–ø–ø—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ø–∞–ª–∏?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —É–ª–∏—Ü
@dp.callback_query(lambda c: c.data.startswith("rent_group:"))
async def choose_rent_street(callback: types.CallbackQuery, state: FSMContext):
    group = callback.data.split(":")[1]
    data = await state.get_data()
    to_id = data["rent_to"]
    owned = player_properties.get(to_id, [])

    streets = [
        street["name"]
        for street in property_groups[group]
        if street["name"] in owned
    ]

    buttons = [
        [InlineKeyboardButton(text=street, callback_data=f"rent_street:{street}")]
        for street in streets
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("üèò –ö–∞–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–ª–∏—Ü–∞?", reply_markup=keyboard)

# –í—ã–±–æ—Ä —É–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–Ω—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("rent_street:"))
async def pay_rent(callback: types.CallbackQuery, state: FSMContext):
    street_name = callback.data.split(":")[1].strip()
    data = await state.get_data()
    user_id = callback.from_user.id
    to_id = data.get("rent_to")

    street_info, group_name = find_street_info_and_group(street_name)
    if not street_info:
        await callback.message.answer("‚ùó –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≤–æ–¥—ã ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∫—É–±–∏–∫–æ–≤
    if group_name == "–ó–∞–≤–æ–¥—ã":
        await state.update_data(rent_street=street_name, rent_group=group_name, rent_to=to_id)
        await callback.message.edit_text("üé≤ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –≤—ã–ø–∞–≤—à—É—é –Ω–∞ –∫—É–±–∏–∫–∞—Ö (–æ—Ç 2 –¥–æ 12):")
        await state.set_state(RentStates.wait_for_dice_sum)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –∂–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
    if group_name == "–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏":
        owned = player_properties.get(to_id, [])
        railroads = [s["name"] for s in property_groups["–ñ–µ–ª–µ–∑–Ω—ã–µ –¥–æ—Ä–æ–≥–∏"]]
        num_owned = sum(1 for r in railroads if r in owned)

        if num_owned == 1:
            rent = 25
        elif num_owned == 2:
            rent = 50
        elif num_owned == 3:
            rent = 100
        elif num_owned >= 4:
            rent = 200
        else:
            rent = 0
    else:
        buildings = player_buildings.get(to_id, {}).get(street_name, {"houses": 0, "hotel": False})
        if buildings["hotel"]:
            rent = street_info["rent"][5]
        else:
            rent = street_info["rent"][buildings["houses"]]

    balance_from = player_balance.get(user_id, START_MONEY)
    balance_to = player_balance.get(to_id, START_MONEY)

    if balance_from < rent:
        await callback.message.answer(f"üí∏ –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –†–µ–Ω—Ç–∞: {rent}‚ÇΩ, —É –≤–∞—Å: {balance_from}‚ÇΩ.")
        await state.clear()
        return

    player_balance[user_id] = balance_from - rent
    player_balance[to_id] = balance_to + rent

    await callback.message.answer(
        f"‚úÖ –í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ {rent}‚ÇΩ —Ä–µ–Ω—Ç—ã –∑–∞ ¬´{street_name}¬ª –∏–≥—Ä–æ–∫—É {player_names[to_id]}.\n"
        f"üì§ –í–∞—à –±–∞–ª–∞–Ω—Å: {player_balance[user_id]}‚ÇΩ\n"
        f"üì• –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {player_balance[to_id]}‚ÇΩ"
    )

    await bot.send_message(
        to_id,
        f"üí∞ –í–∞–º –∑–∞–ø–ª–∞—Ç–∏–ª–∏ {rent}‚ÇΩ —Ä–µ–Ω—Ç—ã –∑–∞ ¬´{street_name}¬ª!\n"
        f"üë§ –û—Ç: {player_names[user_id]}\n"
        f"üíµ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_balance[to_id]}‚ÇΩ"
    )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –∫—É–±–∏–∫–æ–≤
@dp.message(RentStates.wait_for_dice_sum)
async def process_dice_sum_input(message: types.Message, state: FSMContext):
    try:
        dice_sum = int(message.text.strip())
        if dice_sum < 2 or dice_sum > 12:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 12.")
        return

    data = await state.get_data()
    user_id = message.from_user.id
    to_id = data.get("rent_to")
    street_name = data.get("rent_street")

    owned = player_properties.get(to_id, [])
    factories = [s["name"] for s in property_groups["–ó–∞–≤–æ–¥—ã"]]
    num_owned = sum(1 for f in factories if f in owned)

    rent = dice_sum * (5 if num_owned == 1 else 10)

    balance_from = player_balance.get(user_id, START_MONEY)
    balance_to = player_balance.get(to_id, START_MONEY)

    if balance_from < rent:
        await message.answer(f"üí∏ –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –†–µ–Ω—Ç–∞: {rent}‚ÇΩ, —É –≤–∞—Å: {balance_from}‚ÇΩ.")
        await state.clear()
        return

    player_balance[user_id] = balance_from - rent
    player_balance[to_id] = balance_to + rent

    await message.answer(
        f"‚úÖ –í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ {rent}‚ÇΩ —Ä–µ–Ω—Ç—ã –∑–∞ ¬´{street_name}¬ª –∏–≥—Ä–æ–∫—É {player_names[to_id]}.\n"
        f"üì§ –í–∞—à –±–∞–ª–∞–Ω—Å: {player_balance[user_id]}‚ÇΩ\n"
        f"üì• –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {player_balance[to_id]}‚ÇΩ"
    )

    await bot.send_message(
        to_id,
        f"üí∞ –í–∞–º –∑–∞–ø–ª–∞—Ç–∏–ª–∏ {rent}‚ÇΩ —Ä–µ–Ω—Ç—ã –∑–∞ ¬´{street_name}¬ª!\n"
        f"üë§ –û—Ç: {player_names[user_id]}\n"
        f"üíµ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {player_balance[to_id]}‚ÇΩ"
    )

    await state.clear()

# –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –∏–≥—Ä–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())